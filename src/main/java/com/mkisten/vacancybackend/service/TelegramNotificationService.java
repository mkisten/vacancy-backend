package com.mkisten.vacancybackend.service;

import com.mkisten.vacancybackend.entity.Vacancy;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.util.List;

@Slf4j
@Service
public class TelegramNotificationService {

    private final TokenManagerService tokenManagerService;

    @Value("${app.telegram.max-vacancies-per-message:10}")
    private int maxVacanciesPerMessage;

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å dependency injection
    public TelegramNotificationService(TokenManagerService tokenManagerService) {
        this.tokenManagerService = tokenManagerService;
    }

    public void sendNewVacanciesNotification(Long telegramId, List<Vacancy> newVacancies) {
        if (newVacancies.isEmpty()) {
            return;
        }

        try {
            String message = formatNewVacanciesMessage(newVacancies);
            tokenManagerService.sendTelegramNotification(telegramId, message);
            log.info("New vacancies notification sent to user {}: {} vacancies",
                    telegramId, newVacancies.size());

        } catch (Exception e) {
            log.error("Failed to send new vacancies notification to user {}: {}",
                    telegramId, e.getMessage(), e);
        }
    }

    public void sendTextMessage(Long telegramId, String text) {
        try {
            tokenManagerService.sendTelegramNotification(telegramId, text);
            log.debug("Message sent to user {}", telegramId);
        } catch (Exception e) {
            log.error("Failed to send message to user {}: {}", telegramId, e.getMessage());
            throw new RuntimeException("Telegram notification failed", e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    public void sendTestNotification(Long telegramId) {
        String message = "üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n" +
                "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–∫–∞–Ω—Å–∏–π.\n" +
                "–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! ‚úÖ";

        sendTextMessage(telegramId, message);
        log.info("Test notification sent to user {}", telegramId);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    public void sendErrorNotification(Long telegramId, String errorMessage) {
        String message = "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n" +
                "–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞:\n" +
                "<code>" + escapeHtml(errorMessage) + "</code>\n\n" +
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.";

        sendTextMessage(telegramId, message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
     */
    public void sendSettingsUpdatedNotification(Long telegramId) {
        String message = "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n" +
                "–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n" +
                "–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.";

        sendTextMessage(telegramId, message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public void sendStatisticsNotification(Long telegramId, long totalVacancies, long newVacancies) {
        String message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π</b>\n\n" +
                "–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: <b>" + totalVacancies + "</b>\n" +
                "–ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: <b>" + newVacancies + "</b>\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.";

        sendTextMessage(telegramId, message);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö
     */
    private String formatNewVacanciesMessage(List<Vacancy> vacancies) {
        StringBuilder sb = new StringBuilder();

        if (vacancies.size() == 1) {
            sb.append("üéØ –ù–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è!\n\n");
        } else {
            sb.append("üéØ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: ").append(vacancies.size()).append("\n\n");
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≤–∞–∫–∞–Ω—Å–∏–π
        int maxDisplay = 5;
        for (int i = 0; i < Math.min(vacancies.size(), maxDisplay); i++) {
            Vacancy vacancy = vacancies.get(i);
            sb.append(formatSingleVacancy(vacancy));

            // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if (i < Math.min(vacancies.size(), maxDisplay) - 1) {
                sb.append("\n").append("‚îÄ".repeat(30)).append("\n\n");
            }
        }

        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–∞–∫–∞–Ω—Å–∏–π
        if (vacancies.size() > maxDisplay) {
            sb.append("\n\nüìä ... –∏ –µ—â–µ ").append(vacancies.size() - maxDisplay)
                    .append(" –≤–∞–∫–∞–Ω—Å–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏");
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        sb.append("\n\nüöÄ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π!");

        return sb.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ —Å Markdown
     */
    private String formatSingleVacancy(Vacancy vacancy) {
        StringBuilder sb = new StringBuilder();

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–∂–∏—Ä–Ω—ã–π —á–µ—Ä–µ–∑ Markdown)
        sb.append("üéØ *").append(escapeMarkdown(vacancy.getTitle())).append("*\n");

        // –ö–æ–º–ø–∞–Ω–∏—è
        sb.append("üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* ").append(escapeMarkdown(vacancy.getEmployer() != null ? vacancy.getEmployer() : "–ù–µ —É–∫–∞–∑–∞–Ω–∞")).append("\n");

        // –ì–æ—Ä–æ–¥
        sb.append("üìç *–ì–æ—Ä–æ–¥:* ").append(escapeMarkdown(vacancy.getCity() != null ? vacancy.getCity() : "–ù–µ —É–∫–∞–∑–∞–Ω")).append("\n");

        // –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã
        String schedule = vacancy.getSchedule() != null ? formatSchedule(vacancy.getSchedule()) : "–ù–µ —É–∫–∞–∑–∞–Ω";
        sb.append("üìä *–§–æ—Ä–º–∞—Ç:* ").append(escapeMarkdown(schedule)).append("\n");

        // –ó–∞—Ä–ø–ª–∞—Ç–∞
        String salary = vacancy.getSalary() != null && !vacancy.getSalary().equals("–ù–µ —É–∫–∞–∑–∞–Ω–∞") ?
                vacancy.getSalary() : "–Ω–µ —É–∫–∞–∑–∞–Ω–∞";
        sb.append("üí∞ *–ó–∞—Ä–ø–ª–∞—Ç–∞:* ").append(escapeMarkdown(salary)).append("\n");

        // –°—Å—ã–ª–∫–∞
        sb.append("üîó *–°—Å—ã–ª–∫–∞:* ").append(vacancy.getUrl());

        return sb.toString();
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown
     */
    private String escapeMarkdown(String text) {
        if (text == null) return "";
        return text.replace("*", "\\*")
                .replace("_", "\\_")
                .replace("`", "\\`")
                .replace("[", "\\[")
                .replace("]", "\\]")
                .replace("(", "\\(")
                .replace(")", "\\)")
                .replace("~", "\\~")
                .replace(">", "\\>")
                .replace("#", "\\#")
                .replace("+", "\\+")
                .replace("-", "\\-")
                .replace("=", "\\=")
                .replace("|", "\\|")
                .replace("{", "\\{")
                .replace("}", "\\}")
                .replace(".", "\\.")
                .replace("!", "\\!");
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
     */
    private String formatSchedule(String schedule) {
        switch (schedule.toLowerCase()) {
            case "remote": return "üè† –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞";
            case "fullDay": return "üìÖ –ü–æ–ª–Ω—ã–π –¥–µ–Ω—å";
            case "shift": return "üîÑ –°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫";
            case "flexible": return "‚è∞ –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫";
            default: return schedule;
        }
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML-—Å–∏–º–≤–æ–ª–æ–≤
     */
    private String escapeHtml(String text) {
        if (text == null) return "";
        return text.replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;")
                .replace("\"", "&quot;")
                .replace("'", "&#39;");
    }
}